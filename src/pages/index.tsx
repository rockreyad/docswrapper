import { type NextPage } from "next";
import { signIn, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import { Header } from "~/components/Header";
import { NoteCard } from "~/components/NoteCard";
import { NoteEditor } from "~/components/NoteEditor";

import { api, type RouterOutputs } from "~/utils/api";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Docs Wrapper</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;

type Doc = RouterOutputs["doc"]["getAll"][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();
  const [selectedDoc, setSelectedDoc] = useState<Doc | null>(null);

  const { data: docs, refetch: refetchDocs } = api.doc.getAll.useQuery(
    undefined, //no input
    {
      enabled: sessionData?.user !== undefined,
    }
  );

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      docId: selectedDoc?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedDoc !== null,
    }
  );

  const createDoc = api.doc.create.useMutation({
    onSuccess: () => {
      void refetchDocs();
    },
  });
  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });
  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });
  return (
    <div className="">
      {sessionData?.user ? (
        <div className="flex justify-between bg-base-200 p-2">
          <div className="w-1/3">
            <input
              type="text"
              placeholder="Type docs title here..."
              className="input-bordered input w-full max-w-xs bg-gray-100"
              onKeyDown={(e) => {
                if (e.key === "Enter") {
                  console.log("createDoc.mutate", createDoc.mutate);
                  createDoc.mutate({
                    title: e.currentTarget.value,
                  });
                  e.currentTarget.value = "";
                }
              }}
            />
            <div className="divider"></div>
            <div className="px-2 ">
              <h1 className="text-2xl font-bold">Docs</h1>
              <ul className="space-y-2 py-4">
                {docs &&
                  docs?.map((doc) => (
                    <li className="w-full py-1" key={doc.id}>
                      <a
                        className="w-full rounded-md bg-gray-50 p-2 capitalize focus:bg-blue-200 focus:outline-offset-1"
                        href="#"
                        onClick={(evt) => {
                          evt.preventDefault();
                          setSelectedDoc(doc);
                        }}
                      >
                        {doc.title}
                      </a>
                    </li>
                  ))}
              </ul>
            </div>
          </div>
          <div className="mx-4 w-full space-y-4 border-l-2 border-l-base-300  px-4 md:container">
            {notes && notes.length > 0 ? (
              <div className="space-y-2">
                {notes?.map((note) => (
                  <div key={note.id} className="">
                    <NoteCard
                      note={note}
                      onDelete={() => void deleteNote.mutate({ id: note.id })}
                    />
                  </div>
                ))}
              </div>
            ) : (
              <div className="shadow-x card border border-gray-200 bg-rose-500 p-2 text-base-100">
                No notes here
              </div>
            )}
            <NoteEditor
              onSave={({ title, content }) => {
                void createNote.mutate({
                  title,
                  content,
                  docId: selectedDoc?.id ?? "",
                });
              }}
            />
          </div>
        </div>
      ) : (
        <div
          className="hero min-h-screen"
          style={{
            backgroundImage: `url("https://cdn.pixabay.com/photo/2016/11/22/23/03/hardwood-1851071_960_720.jpg")`,
          }}
        >
          <div className="hero-overlay bg-opacity-60"></div>
          <div className="hero-content text-center text-neutral-content">
            <div className="max-w-md">
              <h1 className="mb-5 text-5xl font-bold">Hello there</h1>
              <p className="mb-5">
                Provident cupiditate voluptatem et in. Quaerat fugiat ut
                assumenda excepturi exercitationem quasi. In deleniti eaque aut
                repudiandae et a id nisi.
              </p>
              <button onClick={() => void signIn()} className="btn-primary btn">
                Get Started
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
